{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Smart Health Care Management System\n\n## Overview\n\nThis is a comprehensive healthcare management system built with React (frontend) and Express (backend) that facilitates communication between patients, doctors, and administrators. The application provides features like appointment booking, real-time chat, video calling, and user management through role-based dashboards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with functional components and hooks\n- **Routing**: Wouter for client-side navigation\n- **State Management**: TanStack Query for server state management and React Context for authentication\n- **Styling**: TailwindCSS with shadcn/ui component library using the \"new-york\" style variant\n- **Real-time Communication**: WebSocket client for chat functionality\n- **Build Tool**: Vite with TypeScript support and custom path aliases\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **WebSocket**: Native WebSocket server integrated with Express for real-time messaging\n- **Storage**: In-memory storage implementation with interface abstraction for future database migration\n- **API Design**: RESTful endpoints with role-based access control middleware\n\n### Database Schema Design\nThe application uses Drizzle ORM with PostgreSQL dialect, defining four main entities:\n- **Users**: Core user information with role-based access (patient, doctor, admin)\n- **Doctors**: Extended doctor-specific information linked to users\n- **Appointments**: Scheduling system connecting patients and doctors\n- **Messages**: Real-time messaging system for user communication\n\n### Authentication & Authorization\n- JWT token-based authentication stored in localStorage\n- Role-based route protection with three user types: patient, doctor, admin\n- Protected routes component that validates user permissions\n- Automatic token validation and user session management\n\n### Real-time Features\n- WebSocket connection for instant messaging between users\n- Socket service abstraction for handling message broadcasting\n- Connection management with automatic authentication\n- Message persistence and chat history retrieval\n\n### UI/UX Design Patterns\n- Responsive design with mobile-first approach using TailwindCSS\n- Component composition using Radix UI primitives\n- Consistent theming with CSS custom properties for dark/light mode support\n- Accessible components following WAI-ARIA standards\n- Form handling with React Hook Form and Zod validation\n\n## External Dependencies\n\n### Core Frontend Libraries\n- **React Ecosystem**: React 18 with modern hooks, React Router (Wouter), TanStack Query for data fetching\n- **UI Components**: Radix UI primitives, shadcn/ui components, Lucide React icons\n- **Styling**: TailwindCSS, class-variance-authority for component variants\n- **Form Management**: React Hook Form with Hookform Resolvers for validation\n\n### Backend Dependencies\n- **Database**: Neon Database (serverless PostgreSQL), Drizzle ORM for type-safe queries\n- **Authentication**: jsonwebtoken for JWT handling, bcrypt for password security\n- **WebSocket**: Native WebSocket (ws) library for real-time communication\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n\n### Development & Build Tools\n- **TypeScript**: Full type safety across frontend and backend\n- **Vite**: Modern build tool with HMR and optimized bundling\n- **ESBuild**: Fast TypeScript compilation for production builds\n- **Drizzle Kit**: Database migrations and schema management\n- **PostCSS**: CSS processing with autoprefixer\n\n### Third-party Services\n- **Neon Database**: Serverless PostgreSQL hosting for scalable data storage\n- **Replit Integration**: Development environment plugins and error handling\n- **Font Loading**: Google Fonts integration for typography (DM Sans, Geist Mono, etc.)\n\nThe architecture prioritizes scalability with the abstracted storage interface, enabling easy migration from in-memory storage to production databases. The modular component structure and clear separation of concerns facilitate maintenance and feature expansion.","size_bytes":4249},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { loginSchema, insertUserSchema, insertDoctorSchema, insertAppointmentSchema, insertMessageSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"healthcare_secret_key\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: any;\n}\n\n// JWT middleware\nconst authenticateToken = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const connectedClients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws, req) => {\n    console.log('WebSocket connection established');\n    \n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth') {\n          // Store client connection with user ID\n          connectedClients.set(message.userId, ws);\n          ws.send(JSON.stringify({ type: 'auth', status: 'success' }));\n        } else if (message.type === 'chat_message') {\n          // Store message and broadcast to recipient\n          const savedMessage = await storage.createMessage({\n            senderId: message.senderId,\n            receiverId: message.receiverId,\n            content: message.content,\n          });\n\n          // Send to recipient if online\n          const recipientWs = connectedClients.get(message.receiverId);\n          if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n            recipientWs.send(JSON.stringify({\n              type: 'new_message',\n              message: savedMessage,\n            }));\n          }\n\n          // Send confirmation to sender\n          ws.send(JSON.stringify({\n            type: 'message_sent',\n            message: savedMessage,\n          }));\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Remove client from connected clients\n      for (const [userId, client] of Array.from(connectedClients.entries())) {\n        if (client === ws) {\n          connectedClients.delete(userId);\n          break;\n        }\n      }\n    });\n  });\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password, role } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      // For demo purposes, simple password comparison (in production, use bcrypt)\n      if (user.password !== password || user.role !== role) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const token = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.json({ token, user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists' });\n      }\n\n      const user = await storage.createUser(userData);\n      const token = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: '24h' });\n      \n      res.json({ token, user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  app.get('/api/auth/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    res.json({ user: { ...req.user, password: undefined } });\n  });\n\n  // Doctor routes\n  app.get('/api/doctors', async (req, res) => {\n    try {\n      const doctors = await storage.getAllDoctors();\n      const doctorsWithUserInfo = await Promise.all(\n        doctors.map(async (doctor) => {\n          const user = await storage.getUser(doctor.userId);\n          return {\n            ...doctor,\n            name: user ? `Dr. ${user.firstName} ${user.lastName}` : 'Unknown Doctor',\n            email: user?.email,\n          };\n        })\n      );\n      res.json(doctorsWithUserInfo);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch doctors' });\n    }\n  });\n\n  app.post('/api/doctors', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const doctorData = insertDoctorSchema.parse(req.body);\n      const doctor = await storage.createDoctor(doctorData);\n      res.json(doctor);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  app.delete('/api/doctors/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const success = await storage.deleteDoctor(req.params.id);\n      if (success) {\n        res.json({ message: 'Doctor removed successfully' });\n      } else {\n        res.status(404).json({ message: 'Doctor not found' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to remove doctor' });\n    }\n  });\n\n  // Appointment routes\n  app.get('/api/appointments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      let appointments: any[] = [];\n      \n      if (req.user.role === 'patient') {\n        appointments = await storage.getAppointmentsByPatientId(req.user.id);\n      } else if (req.user.role === 'doctor') {\n        const doctor = await storage.getDoctorByUserId(req.user.id);\n        if (doctor) {\n          appointments = await storage.getAppointmentsByDoctorId(doctor.id);\n        }\n      }\n\n      // Populate with doctor/patient info\n      const appointmentsWithInfo = await Promise.all(\n        appointments.map(async (apt: any) => {\n          const doctor = await storage.getDoctor(apt.doctorId);\n          const patient = await storage.getUser(apt.patientId);\n          const doctorUser = doctor ? await storage.getUser(doctor.userId) : null;\n          \n          return {\n            ...apt,\n            doctorName: doctorUser ? `Dr. ${doctorUser.firstName} ${doctorUser.lastName}` : 'Unknown Doctor',\n            patientName: patient ? `${patient.firstName} ${patient.lastName}` : 'Unknown Patient',\n            specialty: doctor?.specialty,\n          };\n        })\n      );\n\n      res.json(appointmentsWithInfo);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch appointments' });\n    }\n  });\n\n  app.get('/api/appointments/today', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'doctor') {\n        return res.status(403).json({ message: 'Doctor access required' });\n      }\n\n      const doctor = await storage.getDoctorByUserId(req.user.id);\n      if (!doctor) {\n        return res.status(404).json({ message: 'Doctor profile not found' });\n      }\n\n      const appointments = await storage.getTodayAppointmentsByDoctorId(doctor.id);\n      \n      const appointmentsWithPatientInfo = await Promise.all(\n        appointments.map(async (apt) => {\n          const patient = await storage.getUser(apt.patientId);\n          return {\n            ...apt,\n            patientName: patient ? `${patient.firstName} ${patient.lastName}` : 'Unknown Patient',\n          };\n        })\n      );\n\n      res.json(appointmentsWithPatientInfo);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch today appointments' });\n    }\n  });\n\n  app.post('/api/appointments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      \n      if (req.user.role === 'patient') {\n        appointmentData.patientId = req.user.id;\n      }\n      \n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  // Chat routes\n  app.get('/api/chat/conversations', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const chatList = await storage.getChatListForUser(req.user.id);\n      res.json(chatList);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch conversations' });\n    }\n  });\n\n  app.get('/api/chat/messages/:userId', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messages = await storage.getMessagesBetweenUsers(req.user.id, req.params.userId);\n      \n      // Mark messages as read\n      await storage.markMessagesAsRead(req.params.userId, req.user.id);\n      \n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch messages' });\n    }\n  });\n\n  app.post('/api/chat/messages', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const messageData = insertMessageSchema.parse(req.body);\n      messageData.senderId = req.user.id;\n      \n      const message = await storage.createMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  // Profile routes\n  app.put('/api/profile', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updates = req.body;\n      delete updates.id;\n      delete updates.password; // Don't allow password updates through this endpoint\n      delete updates.role; // Don't allow role changes\n      \n      const updatedUser = await storage.updateUser(req.user.id, updates);\n      if (updatedUser) {\n        res.json({ user: { ...updatedUser, password: undefined } });\n      } else {\n        res.status(404).json({ message: 'User not found' });\n      }\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid request data' });\n    }\n  });\n\n  // Admin stats route\n  app.get('/api/admin/stats', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const doctors = await storage.getAllDoctors();\n      const allUsers = Array.from((storage as any).users.values());\n      const patients = allUsers.filter((user: any) => user.role === 'patient');\n      const allAppointments = Array.from((storage as any).appointments.values());\n      \n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n      \n      const todayAppointments = allAppointments.filter((apt: any) => \n        apt.appointmentDate >= startOfDay && apt.appointmentDate < endOfDay\n      );\n\n      res.json({\n        totalDoctors: doctors.length,\n        totalPatients: patients.length,\n        todayAppointments: todayAppointments.length,\n        pendingIssues: 3, // Mock data\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch stats' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12302},"server/storage.ts":{"content":"import { type User, type InsertUser, type Doctor, type InsertDoctor, type Appointment, type InsertAppointment, type Message, type InsertMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Doctor operations\n  getAllDoctors(): Promise<Doctor[]>;\n  getDoctor(id: string): Promise<Doctor | undefined>;\n  getDoctorByUserId(userId: string): Promise<Doctor | undefined>;\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  updateDoctor(id: string, updates: Partial<Doctor>): Promise<Doctor | undefined>;\n  deleteDoctor(id: string): Promise<boolean>;\n\n  // Appointment operations\n  getAppointmentsByPatientId(patientId: string): Promise<Appointment[]>;\n  getAppointmentsByDoctorId(doctorId: string): Promise<Appointment[]>;\n  getTodayAppointmentsByDoctorId(doctorId: string): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined>;\n\n  // Message operations\n  getMessagesBetweenUsers(userId1: string, userId2: string): Promise<Message[]>;\n  getChatListForUser(userId: string): Promise<{ userId: string; userName: string; lastMessage: string; lastMessageTime: Date; unreadCount: number }[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  markMessagesAsRead(senderId: string, receiverId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private doctors: Map<string, Doctor> = new Map();\n  private appointments: Map<string, Appointment> = new Map();\n  private messages: Map<string, Message> = new Map();\n\n  constructor() {\n    // Seed with initial data\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create admin user\n    const adminUser = await this.createUser({\n      email: 'admin@healthcare.com',\n      password: 'admin123',\n      firstName: 'Admin',\n      lastName: 'User',\n      role: 'admin',\n    });\n\n    // Create doctor users\n    const doctorUser1 = await this.createUser({\n      email: 'sarah.johnson@healthcare.com',\n      password: 'doctor123',\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      role: 'doctor',\n    });\n\n    const doctorUser2 = await this.createUser({\n      email: 'michael.chen@healthcare.com',\n      password: 'doctor123',\n      firstName: 'Michael',\n      lastName: 'Chen',\n      role: 'doctor',\n    });\n\n    // Create patient user\n    const patientUser = await this.createUser({\n      email: 'john.doe@email.com',\n      password: 'patient123',\n      firstName: 'John',\n      lastName: 'Doe',\n      role: 'patient',\n      phone: '+1 (555) 123-4567',\n      dateOfBirth: '1990-05-15',\n      address: '123 Main Street, Cityville, State 12345',\n      emergencyContact: 'Jane Doe',\n      emergencyPhone: '+1 (555) 987-6543',\n      medicalHistory: 'No known allergies. Taking daily vitamins.',\n    });\n\n    // Create doctors\n    await this.createDoctor({\n      userId: doctorUser1.id,\n      specialty: 'Cardiology',\n      education: 'Harvard Medical School',\n      experience: 15,\n      rating: 49, // 4.9\n      reviewCount: 127,\n      isAvailable: true,\n      bio: 'Experienced cardiologist specializing in heart disease prevention and treatment.',\n    });\n\n    await this.createDoctor({\n      userId: doctorUser2.id,\n      specialty: 'Dermatology',\n      education: 'Stanford Medical School',\n      experience: 12,\n      rating: 47, // 4.7\n      reviewCount: 89,\n      isAvailable: true,\n      bio: 'Dermatology specialist with expertise in skin cancer detection and cosmetic procedures.',\n    });\n\n    // Create sample appointments\n    const doctor1 = await this.getDoctorByUserId(doctorUser1.id);\n    if (doctor1) {\n      await this.createAppointment({\n        patientId: patientUser.id,\n        doctorId: doctor1.id,\n        appointmentDate: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 hours from now\n        appointmentType: 'consultation',\n        status: 'scheduled',\n        notes: 'Regular checkup',\n      });\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id, \n      email: insertUser.email,\n      password: insertUser.password,\n      firstName: insertUser.firstName,\n      lastName: insertUser.lastName,\n      role: insertUser.role,\n      phone: insertUser.phone || null,\n      dateOfBirth: insertUser.dateOfBirth || null,\n      address: insertUser.address || null,\n      emergencyContact: insertUser.emergencyContact || null,\n      emergencyPhone: insertUser.emergencyPhone || null,\n      medicalHistory: insertUser.medicalHistory || null,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Doctor operations\n  async getAllDoctors(): Promise<Doctor[]> {\n    return Array.from(this.doctors.values());\n  }\n\n  async getDoctor(id: string): Promise<Doctor | undefined> {\n    return this.doctors.get(id);\n  }\n\n  async getDoctorByUserId(userId: string): Promise<Doctor | undefined> {\n    return Array.from(this.doctors.values()).find(doctor => doctor.userId === userId);\n  }\n\n  async createDoctor(insertDoctor: InsertDoctor): Promise<Doctor> {\n    const id = randomUUID();\n    const doctor: Doctor = { \n      id, \n      userId: insertDoctor.userId,\n      specialty: insertDoctor.specialty,\n      education: insertDoctor.education || null,\n      experience: insertDoctor.experience || null,\n      rating: insertDoctor.rating || null,\n      reviewCount: insertDoctor.reviewCount || null,\n      isAvailable: insertDoctor.isAvailable || null,\n      bio: insertDoctor.bio || null,\n      createdAt: new Date() \n    };\n    this.doctors.set(id, doctor);\n    return doctor;\n  }\n\n  async updateDoctor(id: string, updates: Partial<Doctor>): Promise<Doctor | undefined> {\n    const doctor = this.doctors.get(id);\n    if (!doctor) return undefined;\n    \n    const updatedDoctor = { ...doctor, ...updates };\n    this.doctors.set(id, updatedDoctor);\n    return updatedDoctor;\n  }\n\n  async deleteDoctor(id: string): Promise<boolean> {\n    return this.doctors.delete(id);\n  }\n\n  // Appointment operations\n  async getAppointmentsByPatientId(patientId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(apt => apt.patientId === patientId);\n  }\n\n  async getAppointmentsByDoctorId(doctorId: string): Promise<Appointment[]> {\n    return Array.from(this.appointments.values()).filter(apt => apt.doctorId === doctorId);\n  }\n\n  async getTodayAppointmentsByDoctorId(doctorId: string): Promise<Appointment[]> {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n    \n    return Array.from(this.appointments.values()).filter(apt => \n      apt.doctorId === doctorId && \n      apt.appointmentDate >= startOfDay && \n      apt.appointmentDate < endOfDay\n    );\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const appointment: Appointment = { \n      id, \n      patientId: insertAppointment.patientId,\n      doctorId: insertAppointment.doctorId,\n      appointmentDate: insertAppointment.appointmentDate,\n      appointmentType: insertAppointment.appointmentType,\n      status: insertAppointment.status || 'scheduled',\n      notes: insertAppointment.notes || null,\n      createdAt: new Date() \n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n    \n    const updatedAppointment = { ...appointment, ...updates };\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  // Message operations\n  async getMessagesBetweenUsers(userId1: string, userId2: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(msg => \n        (msg.senderId === userId1 && msg.receiverId === userId2) ||\n        (msg.senderId === userId2 && msg.receiverId === userId1)\n      )\n      .sort((a, b) => a.timestamp!.getTime() - b.timestamp!.getTime());\n  }\n\n  async getChatListForUser(userId: string): Promise<{ userId: string; userName: string; lastMessage: string; lastMessageTime: Date; unreadCount: number }[]> {\n    const userMessages = Array.from(this.messages.values())\n      .filter(msg => msg.senderId === userId || msg.receiverId === userId);\n\n    const chatMap = new Map<string, { lastMessage: string; lastMessageTime: Date; unreadCount: number }>();\n\n    for (const msg of userMessages) {\n      const otherUserId = msg.senderId === userId ? msg.receiverId : msg.senderId;\n      const existing = chatMap.get(otherUserId);\n      \n      if (!existing || msg.timestamp! > existing.lastMessageTime) {\n        const unreadCount = msg.receiverId === userId && !msg.isRead ? \n          (existing?.unreadCount || 0) + 1 : (existing?.unreadCount || 0);\n        \n        chatMap.set(otherUserId, {\n          lastMessage: msg.content,\n          lastMessageTime: msg.timestamp!,\n          unreadCount,\n        });\n      }\n    }\n\n    const result = [];\n    for (const [otherUserId, chatData] of Array.from(chatMap.entries())) {\n      const otherUser = await this.getUser(otherUserId);\n      if (otherUser) {\n        result.push({\n          userId: otherUserId,\n          userName: `${otherUser.firstName} ${otherUser.lastName}`,\n          ...chatData,\n        });\n      }\n    }\n\n    return result.sort((a, b) => b.lastMessageTime.getTime() - a.lastMessageTime.getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = { \n      ...insertMessage, \n      id, \n      timestamp: new Date(),\n      isRead: false\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async markMessagesAsRead(senderId: string, receiverId: string): Promise<void> {\n    for (const [id, message] of Array.from(this.messages.entries())) {\n      if (message.senderId === senderId && message.receiverId === receiverId) {\n        this.messages.set(id, { ...message, isRead: true });\n      }\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11183},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull(), // 'patient', 'doctor', 'admin'\n  phone: text(\"phone\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  address: text(\"address\"),\n  emergencyContact: text(\"emergency_contact\"),\n  emergencyPhone: text(\"emergency_phone\"),\n  medicalHistory: text(\"medical_history\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const doctors = pgTable(\"doctors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  specialty: text(\"specialty\").notNull(),\n  education: text(\"education\"),\n  experience: integer(\"experience\"), // years\n  rating: integer(\"rating\").default(0), // out of 5, stored as integer (45 = 4.5)\n  reviewCount: integer(\"review_count\").default(0),\n  isAvailable: boolean(\"is_available\").default(true),\n  bio: text(\"bio\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => doctors.id),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  appointmentType: text(\"appointment_type\").notNull(), // 'consultation', 'followup', 'checkup', 'emergency'\n  status: text(\"status\").notNull().default('scheduled'), // 'scheduled', 'completed', 'cancelled'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  isRead: boolean(\"is_read\").default(false),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({ id: true, createdAt: true });\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({ id: true, createdAt: true });\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, timestamp: true });\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  role: z.enum(['patient', 'doctor', 'admin']),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type LoginInput = z.infer<typeof loginSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type Message = typeof messages.$inferSelect;\n","size_bytes":3466},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\n\n// Pages\nimport Homepage from \"@/pages/Homepage\";\nimport Login from \"@/pages/Login\";\nimport Contact from \"@/pages/Contact\";\nimport PatientDashboard from \"@/pages/PatientDashboard\";\nimport DoctorDashboard from \"@/pages/DoctorDashboard\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport DoctorList from \"@/pages/DoctorList\";\nimport AppointmentBooking from \"@/pages/AppointmentBooking\";\nimport Chat from \"@/pages/Chat\";\nimport VideoCall from \"@/pages/VideoCall\";\nimport Profile from \"@/pages/Profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Homepage} />\n      <Route path=\"/login\" component={Login} />\n      \n      {/* Protected routes */}\n      <Route path=\"/patient\">\n        <ProtectedRoute allowedRoles={['patient']}>\n          <PatientDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/doctor\">\n        <ProtectedRoute allowedRoles={['doctor']}>\n          <DoctorDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Public routes for homepage navigation */}\n      <Route path=\"/doctors\" component={DoctorList} />\n      <Route path=\"/appointment-booking\" component={AppointmentBooking} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/about\" component={Contact} />\n      \n      {/* Protected doctor list for authenticated users */}\n      <Route path=\"/doctors-protected\">\n        <ProtectedRoute allowedRoles={['patient']}>\n          <DoctorList />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/appointment-booking-protected\">\n        <ProtectedRoute allowedRoles={['patient']}>\n          <AppointmentBooking />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/chat\">\n        <ProtectedRoute>\n          <Chat />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/video-call\">\n        <ProtectedRoute>\n          <VideoCall />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/profile\">\n        <ProtectedRoute>\n          <Profile />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Additional admin routes */}\n      <Route path=\"/manage-doctors\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/manage-users\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/appointments\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/analytics\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/patients\">\n        <ProtectedRoute allowedRoles={['doctor']}>\n          <DoctorDashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3882},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 15%, 16%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 15%, 16%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 15%, 16%);\n  --primary: hsl(217, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(159, 75%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 15%, 16%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 100%, 50%);\n  --chart-1: hsl(217, 100%, 50%);\n  --chart-2: hsl(159, 75%, 45%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 15%, 16%);\n  --sidebar-primary: hsl(217, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 15%, 16%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(217, 100%, 50%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05), 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 15%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 15%, 12%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 15%, 12%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 15%, 8%);\n  --secondary: hsl(159, 75%, 35%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 15%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 20%);\n  --input: hsl(217, 32%, 20%);\n  --ring: hsl(217, 91%, 60%);\n  --sidebar: hsl(222, 15%, 12%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 15%, 8%);\n  --sidebar-accent: hsl(217, 32%, 15%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 20%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.status-online { \n  background-color: hsl(159, 75%, 45%); \n}\n\n.status-busy { \n  background-color: hsl(0, 84%, 60%); \n}\n\n.status-away { \n  background-color: hsl(45, 93%, 47%); \n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n","size_bytes":3706},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppointmentCard.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { MessageCircle, Video } from 'lucide-react';\n\ninterface AppointmentCardProps {\n  appointment: {\n    id: string;\n    doctorName?: string;\n    patientName?: string;\n    specialty?: string;\n    appointmentDate: string;\n    appointmentType: string;\n    status: string;\n  };\n  userRole: 'patient' | 'doctor';\n  onStartChat: (appointmentId: string) => void;\n  onStartVideoCall: (appointmentId: string) => void;\n}\n\nexport default function AppointmentCard({ appointment, userRole, onStartChat, onStartVideoCall }: AppointmentCardProps) {\n  const displayName = userRole === 'patient' ? appointment.doctorName : appointment.patientName;\n  const displayRole = userRole === 'patient' ? appointment.specialty : 'Patient';\n  \n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"flex items-center space-x-4 p-4 bg-muted/50 rounded-lg mb-4 last:mb-0\" data-testid={`card-appointment-${appointment.id}`}>\n      <Avatar className=\"w-12 h-12\">\n        <AvatarImage src=\"\" alt={displayName} />\n        <AvatarFallback>\n          {displayName?.split(' ').map(n => n[0]).join('') || '?'}\n        </AvatarFallback>\n      </Avatar>\n      <div className=\"flex-1\">\n        <h4 className=\"font-medium text-foreground\" data-testid={`text-name-${appointment.id}`}>\n          {displayName}\n        </h4>\n        <p className=\"text-sm text-muted-foreground\" data-testid={`text-role-${appointment.id}`}>\n          {displayRole}\n        </p>\n        <p className=\"text-sm text-primary font-medium\" data-testid={`text-time-${appointment.id}`}>\n          {formatTime(appointment.appointmentDate)}\n        </p>\n      </div>\n      <div className=\"flex space-x-2\">\n        <Button \n          size=\"sm\" \n          variant=\"outline\"\n          onClick={() => onStartChat(appointment.id)}\n          data-testid={`button-chat-${appointment.id}`}\n        >\n          <MessageCircle className=\"w-4 h-4 mr-1\" />\n          Chat\n        </Button>\n        <Button \n          size=\"sm\" \n          onClick={() => onStartVideoCall(appointment.id)}\n          data-testid={`button-video-${appointment.id}`}\n        >\n          <Video className=\"w-4 h-4 mr-1\" />\n          Video\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2540},"client/src/components/ChatMessageBubble.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Message } from '@shared/schema';\n\ninterface ChatMessageBubbleProps {\n  message: Message;\n  isOwn: boolean;\n  senderName: string;\n}\n\nexport default function ChatMessageBubble({ message, isOwn, senderName }: ChatMessageBubbleProps) {\n  const formatTime = (date: Date | null) => {\n    if (!date) return '';\n    return new Date(date).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  if (isOwn) {\n    return (\n      <div className=\"flex items-start space-x-3 justify-end\" data-testid={`message-${message.id}`}>\n        <div className=\"flex-1 flex justify-end\">\n          <div className=\"bg-primary rounded-lg p-3 shadow-sm max-w-xs\">\n            <p className=\"text-sm text-primary-foreground\" data-testid={`text-content-${message.id}`}>\n              {message.content}\n            </p>\n          </div>\n        </div>\n        <Avatar className=\"w-8 h-8\">\n          <AvatarImage src=\"\" alt=\"You\" />\n          <AvatarFallback className=\"text-xs\">You</AvatarFallback>\n        </Avatar>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-start space-x-3\" data-testid={`message-${message.id}`}>\n      <Avatar className=\"w-8 h-8\">\n        <AvatarImage src=\"\" alt={senderName} />\n        <AvatarFallback className=\"text-xs\">\n          {senderName.split(' ').map(n => n[0]).join('')}\n        </AvatarFallback>\n      </Avatar>\n      <div className=\"flex-1\">\n        <div className=\"bg-card rounded-lg p-3 shadow-sm\">\n          <p className=\"text-sm text-foreground\" data-testid={`text-content-${message.id}`}>\n            {message.content}\n          </p>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`text-timestamp-${message.id}`}>\n          {formatTime(message.timestamp)}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1914},"client/src/components/DoctorCard.tsx":{"content":"import { Star } from 'lucide-react';\nimport { Link } from 'wouter';\n\ninterface Doctor {\n  id: string;\n  name: string;\n  specialty: string;\n  rating: number;\n  reviewCount: number;\n  experience: string;\n}\n\ninterface DoctorCardProps {\n  doctor: Doctor;\n}\n\nexport default function DoctorCard({ doctor }: DoctorCardProps) {\n  if (!doctor) return null;\n\n  const renderStars = (rating: number) => {\n    const safeRating = Math.max(0, Math.min(5, rating || 0));\n    const fullStars = Math.floor(safeRating);\n    const hasHalfStar = safeRating % 1 !== 0;\n    const emptyStars = Math.max(0, 5 - fullStars - (hasHalfStar ? 1 : 0));\n    \n    return (\n      <div className=\"flex items-center space-x-1\">\n        {[...Array(fullStars)].map((_, i) => (\n          <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n        ))}\n        {hasHalfStar && <Star className=\"w-4 h-4 fill-yellow-200 text-yellow-400\" />}\n        {[...Array(emptyStars)].map((_, i) => (\n          <Star key={i} className=\"w-4 h-4 text-gray-300\" />\n        ))}\n        <span className=\"text-sm text-gray-600 ml-1\">({doctor?.reviewCount || 0})</span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300\">\n      <div className=\"text-center\">\n        {/* Doctor Avatar */}\n        <div className=\"w-20 h-20 bg-gray-200 rounded-full mx-auto mb-4 flex items-center justify-center\">\n          <span className=\"text-gray-500 text-sm\">Doctor Image</span>\n        </div>\n        \n        {/* Doctor Info */}\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-1\">{doctor?.name || 'Unknown Doctor'}</h3>\n        <p className=\"text-blue-600 font-medium mb-2\">{doctor?.specialty || 'General Medicine'}</p>\n        <p className=\"text-gray-600 text-sm mb-3\">{doctor?.experience || 'N/A'} experience</p>\n        \n        {/* Rating */}\n        <div className=\"mb-4\">\n          {renderStars(doctor?.rating || 0)}\n        </div>\n        \n        {/* Book Button */}\n        <Link href=\"/appointment-booking\">\n          <button className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\">\n            Book Appointment\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n}","size_bytes":2277},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/context/AuthContext';\nimport { ReactNode } from 'react';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  allowedRoles?: string[];\n}\n\nexport default function ProtectedRoute({ children, allowedRoles }: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground\">Please log in to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1335},"client/src/context/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '@shared/schema';\nimport { apiRequest } from '@/services/api';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (email: string, password: string, role: string) => Promise<void>;\n  signup: (userData: any) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const savedToken = localStorage.getItem('jwt_token');\n    if (savedToken) {\n      setToken(savedToken);\n      fetchCurrentUser(savedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchCurrentUser = async (authToken: string) => {\n    try {\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n        },\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        localStorage.removeItem('jwt_token');\n        setToken(null);\n      }\n    } catch (error) {\n      console.error('Failed to fetch current user:', error);\n      localStorage.removeItem('jwt_token');\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string, role: string) => {\n    const response = await apiRequest('POST', '/api/auth/login', { email, password, role });\n    const data = await response.json();\n    \n    setToken(data.token);\n    setUser(data.user);\n    localStorage.setItem('jwt_token', data.token);\n  };\n\n  const signup = async (userData: any) => {\n    const response = await apiRequest('POST', '/api/auth/signup', userData);\n    const data = await response.json();\n    \n    setToken(data.token);\n    setUser(data.user);\n    localStorage.setItem('jwt_token', data.token);\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('jwt_token');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, signup, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2588},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { UserRound, Users, Calendar, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/services/api';\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: doctors, isLoading: doctorsLoading } = useQuery({\n    queryKey: ['/api/doctors'],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  const deleteDoctorMutation = useMutation({\n    mutationFn: async (doctorId: string) => {\n      return apiRequest('DELETE', `/api/doctors/${doctorId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/doctors'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Success\",\n        description: \"Doctor removed successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to remove doctor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRemoveDoctor = (doctorId: string) => {\n    if (window.confirm('Are you sure you want to remove this doctor?')) {\n      deleteDoctorMutation.mutate(doctorId);\n    }\n  };\n\n  const handleAddDoctor = () => {\n    // This could open a modal or navigate to a form\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"Add doctor functionality will be implemented\",\n    });\n  };\n\n  const handleEditDoctor = (doctorId: string) => {\n    // This could open a modal or navigate to an edit form\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"Edit doctor functionality will be implemented\",\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType=\"admin\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Admin Dashboard\" \n          subtitle=\"System management and oversight\"\n        >\n          <Button onClick={handleAddDoctor} data-testid=\"button-add-doctor\">\n            <UserRound className=\"w-4 h-4 mr-2\" />\n            Add Doctor\n          </Button>\n        </Header>\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* System Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-primary/10 rounded-lg\">\n                    <UserRound className=\"text-primary w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Total Doctors</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-total-doctors\">\n                      {(stats as any)?.totalDoctors || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-secondary/10 rounded-lg\">\n                    <Users className=\"text-secondary w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Total Patients</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-total-patients\">\n                      {(stats as any)?.totalPatients || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-accent rounded-lg\">\n                    <Calendar className=\"text-accent-foreground w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Today's Appointments</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-today-appointments\">\n                      {(stats as any)?.todayAppointments || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-destructive/10 rounded-lg\">\n                    <AlertTriangle className=\"text-destructive w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Pending Issues</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-pending-issues\">\n                      {(stats as any)?.pendingIssues || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Doctor Management Table */}\n          <Card>\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Doctor Management</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Doctor</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Specialty</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Experience</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {doctorsLoading ? (\n                    [...Array(3)].map((_, i) => (\n                      <tr key={i}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"animate-pulse flex items-center\">\n                            <div className=\"rounded-full bg-muted h-10 w-10\"></div>\n                            <div className=\"ml-4 space-y-2\">\n                              <div className=\"h-4 bg-muted rounded w-32\"></div>\n                              <div className=\"h-3 bg-muted rounded w-24\"></div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\"><div className=\"h-4 bg-muted rounded w-20 animate-pulse\"></div></td>\n                        <td className=\"px-6 py-4\"><div className=\"h-4 bg-muted rounded w-16 animate-pulse\"></div></td>\n                        <td className=\"px-6 py-4\"><div className=\"h-4 bg-muted rounded w-12 animate-pulse\"></div></td>\n                        <td className=\"px-6 py-4\"><div className=\"h-4 bg-muted rounded w-24 animate-pulse\"></div></td>\n                      </tr>\n                    ))\n                  ) : Array.isArray(doctors) && doctors.length === 0 ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-8 text-center\">\n                        <UserRound className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\" data-testid=\"text-no-doctors\">No doctors registered</p>\n                      </td>\n                    </tr>\n                  ) : (\n                    Array.isArray(doctors) ? doctors.map((doctor: any) => (\n                      <tr key={doctor.id} data-testid={`row-doctor-${doctor.id}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"w-10 h-10\">\n                              <AvatarImage src=\"\" alt={doctor.name} />\n                              <AvatarFallback>\n                                {doctor.name?.split(' ').map((n: string) => n[0]).join('') || '?'}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"ml-4\">\n                              <div className=\"text-sm font-medium text-foreground\" data-testid={`text-doctor-name-${doctor.id}`}>\n                                {doctor.name}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\" data-testid={`text-doctor-email-${doctor.id}`}>\n                                {doctor.email}\n                              </div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\" data-testid={`text-specialty-${doctor.id}`}>\n                          {doctor.specialty}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge \n                            variant={doctor.isAvailable ? \"default\" : \"secondary\"}\n                            className={doctor.isAvailable ? \"bg-secondary/10 text-secondary\" : \"\"}\n                            data-testid={`badge-status-${doctor.id}`}\n                          >\n                            <span className={`status-dot ${doctor.isAvailable ? 'status-online' : 'status-away'} mr-1`}></span>\n                            {doctor.isAvailable ? 'Active' : 'Away'}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\" data-testid={`text-experience-${doctor.id}`}>\n                          {doctor.experience} years\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleEditDoctor(doctor.id)}\n                            className=\"text-primary hover:text-primary/80 mr-3\"\n                            data-testid={`button-edit-${doctor.id}`}\n                          >\n                            Edit\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleRemoveDoctor(doctor.id)}\n                            className=\"text-destructive hover:text-destructive/80\"\n                            disabled={deleteDoctorMutation.isPending}\n                            data-testid={`button-remove-${doctor.id}`}\n                          >\n                            Remove\n                          </Button>\n                        </td>\n                      </tr>\n                    )) : null\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12055},"client/src/pages/AppointmentBooking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthContext';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Calendar, CheckCircle, X } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/services/api';\n\nexport default function AppointmentBooking() {\n  const [selectedDoctorId, setSelectedDoctorId] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  const [appointmentType, setAppointmentType] = useState('consultation');\n  const [notes, setNotes] = useState('');\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Get doctorId from URL params if provided\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const doctorId = urlParams.get('doctorId');\n    if (doctorId) {\n      setSelectedDoctorId(doctorId);\n    }\n  }, []);\n\n  const { data: doctors } = useQuery({\n    queryKey: ['/api/doctors'],\n    enabled: !!user, // Only fetch if user is authenticated\n  });\n\n  // Show login prompt if user is not authenticated\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center\">\n          <Calendar className=\"w-16 h-16 text-blue-600 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Login Required</h1>\n          <p className=\"text-gray-600 mb-6\">\n            Please login to your account to book an appointment with our doctors.\n          </p>\n          <button \n            onClick={() => setLocation('/login')}\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors\"\n          >\n            Login to Continue\n          </button>\n          <p className=\"text-sm text-gray-500 mt-4\">\n            Don't have an account? Sign up when you click Login.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const selectedDoctor = Array.isArray(doctors) ? doctors.find((doctor: any) => doctor.id === selectedDoctorId) : undefined;\n\n  const bookAppointmentMutation = useMutation({\n    mutationFn: async (appointmentData: any) => {\n      return apiRequest('POST', '/api/appointments', appointmentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment booked successfully!\",\n      });\n      setLocation('/patient');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to book appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBooking = () => {\n    if (!selectedDoctorId || !selectedDate || !selectedTime) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a doctor, date, and time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const appointmentDate = new Date(`${selectedDate} ${selectedTime}`);\n    \n    bookAppointmentMutation.mutate({\n      doctorId: selectedDoctorId,\n      appointmentDate: appointmentDate.toISOString(),\n      appointmentType,\n      notes,\n    });\n  };\n\n  const availableTimes = [\n    '09:00', '10:30', '14:30', '15:30', '16:00'\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType=\"patient\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Book Appointment\" \n          subtitle=\"Schedule your consultation\"\n        >\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation('/doctors')}\n            data-testid=\"button-close\"\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </Header>\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Doctor Selection & Info */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Select Doctor</h3>\n                  \n                  {!selectedDoctorId ? (\n                    <Select value={selectedDoctorId} onValueChange={setSelectedDoctorId}>\n                      <SelectTrigger data-testid=\"select-doctor\">\n                        <SelectValue placeholder=\"Choose a doctor\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.isArray(doctors) ? doctors.map((doctor: any) => (\n                          <SelectItem key={doctor.id} value={doctor.id}>\n                            {doctor.name} - {doctor.specialty}\n                          </SelectItem>\n                        )) : null}\n                      </SelectContent>\n                    </Select>\n                  ) : selectedDoctor ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Avatar className=\"w-20 h-20\">\n                          <AvatarImage src=\"\" alt={selectedDoctor.name} />\n                          <AvatarFallback className=\"text-lg\">\n                            {selectedDoctor.name?.split(' ').map((n: string) => n[0]).join('') || '?'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h4 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-selected-doctor-name\">\n                            {selectedDoctor.name}\n                          </h4>\n                          <p className=\"text-primary font-medium\" data-testid=\"text-selected-doctor-specialty\">\n                            {selectedDoctor.specialty}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-doctor-education\">\n                            {selectedDoctor.education}\n                          </p>\n                          <div className=\"flex items-center mt-2\">\n                            <span className=\"status-dot status-online mr-2\"></span>\n                            <span className=\"text-sm text-secondary\">Available</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setSelectedDoctorId('')}\n                        data-testid=\"button-change-doctor\"\n                      >\n                        Change Doctor\n                      </Button>\n                    </div>\n                  ) : null}\n                  \n                  <div className=\"space-y-4 mt-6\">\n                    <div>\n                      <Label htmlFor=\"appointmentType\">Appointment Type</Label>\n                      <Select value={appointmentType} onValueChange={setAppointmentType}>\n                        <SelectTrigger data-testid=\"select-appointment-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"consultation\">Consultation</SelectItem>\n                          <SelectItem value=\"followup\">Follow-up</SelectItem>\n                          <SelectItem value=\"checkup\">Regular Checkup</SelectItem>\n                          <SelectItem value=\"emergency\">Emergency</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"notes\">Additional Notes</Label>\n                      <Textarea\n                        id=\"notes\"\n                        value={notes}\n                        onChange={(e) => setNotes(e.target.value)}\n                        placeholder=\"Describe your symptoms or reason for visit...\"\n                        className=\"h-24 resize-none\"\n                        data-testid=\"textarea-notes\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Date & Time Selection */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Select Date & Time</h3>\n                  \n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"date\">Date</Label>\n                      <Input\n                        id=\"date\"\n                        type=\"date\"\n                        value={selectedDate}\n                        onChange={(e) => setSelectedDate(e.target.value)}\n                        min={new Date().toISOString().split('T')[0]}\n                        data-testid=\"input-date\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>Available Times</Label>\n                      <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                        {availableTimes.map((time) => (\n                          <Button\n                            key={time}\n                            variant={selectedTime === time ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setSelectedTime(time)}\n                            data-testid={`button-time-${time}`}\n                          >\n                            {time}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <Button \n                      onClick={handleBooking}\n                      className=\"w-full bg-secondary hover:bg-secondary/90\"\n                      disabled={bookAppointmentMutation.isPending || !selectedDoctorId || !selectedDate || !selectedTime}\n                      data-testid=\"button-confirm-booking\"\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      {bookAppointmentMutation.isPending ? 'Booking...' : 'Confirm Booking'}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11293},"client/src/pages/Chat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthContext';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport ChatMessageBubble from '@/components/ChatMessageBubble';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Send, Paperclip, Video } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { socketService } from '@/services/socket';\nimport { apiRequest } from '@/services/api';\nimport { Message } from '@shared/schema';\n\nexport default function Chat() {\n  const { user } = useAuth();\n  const [selectedUserId, setSelectedUserId] = useState<string>('');\n  const [messageInput, setMessageInput] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [, setLocation] = useLocation();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n\n  const { data: conversations, isLoading: conversationsLoading } = useQuery({\n    queryKey: ['/api/chat/conversations'],\n  });\n\n  const { data: chatMessages, isLoading: messagesLoading } = useQuery({\n    queryKey: ['/api/chat/messages', selectedUserId],\n    enabled: !!selectedUserId,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { receiverId: string; content: string }) => {\n      return apiRequest('POST', '/api/chat/messages', messageData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/chat/conversations'] });\n    },\n  });\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (user?.id) {\n      socketService.connect(user.id);\n\n      socketService.onMessage((message: Message) => {\n        setMessages(prev => [...prev, message]);\n        queryClient.invalidateQueries({ queryKey: ['/api/chat/conversations'] });\n        \n        // If the message is from the currently selected user, update the chat\n        if (message.senderId === selectedUserId) {\n          queryClient.invalidateQueries({ queryKey: ['/api/chat/messages', selectedUserId] });\n        }\n      });\n\n      return () => {\n        socketService.disconnect();\n      };\n    }\n  }, [user?.id, selectedUserId, queryClient]);\n\n  // Update local messages when chat messages change\n  useEffect(() => {\n    if (Array.isArray(chatMessages)) {\n      setMessages(chatMessages);\n    }\n  }, [chatMessages]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim() || !selectedUserId) return;\n\n    const content = messageInput.trim();\n    setMessageInput('');\n\n    // Send via WebSocket for real-time delivery\n    socketService.sendMessage(user!.id, selectedUserId, content);\n\n    // Also send via API for persistence\n    sendMessageMutation.mutate({\n      receiverId: selectedUserId,\n      content,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleStartVideoCall = () => {\n    setLocation('/video-call');\n  };\n\n  const selectedConversation = Array.isArray(conversations) ? conversations.find((conv: any) => conv.userId === selectedUserId) : undefined;\n  const filteredConversations = Array.isArray(conversations) ? conversations.filter((conv: any) => \n    conv.userName.toLowerCase().includes(searchQuery.toLowerCase())\n  ) : [];\n\n  const getSidebarType = () => {\n    if (user?.role === 'patient') return 'patient';\n    if (user?.role === 'doctor') return 'doctor';\n    return 'admin';\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType={getSidebarType()} />\n      \n      <div className=\"flex-1 flex\">\n        {/* Chat List */}\n        <div className=\"w-80 border-r border-border bg-card flex flex-col\">\n          <div className=\"p-4 border-b border-border\">\n            <h2 className=\"text-lg font-semibold text-foreground mb-3\" data-testid=\"text-messages-title\">Messages</h2>\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search conversations...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 text-sm\"\n                data-testid=\"input-search-conversations\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            </div>\n          </div>\n          \n          <div className=\"flex-1 overflow-y-auto\">\n            {conversationsLoading ? (\n              <div className=\"space-y-4 p-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex space-x-3\">\n                    <div className=\"rounded-full bg-muted h-12 w-12\"></div>\n                    <div className=\"space-y-2 flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredConversations.length === 0 ? (\n              <div className=\"p-4 text-center\">\n                <p className=\"text-muted-foreground text-sm\" data-testid=\"text-no-conversations\">\n                  {searchQuery ? 'No conversations found' : 'No conversations yet'}\n                </p>\n              </div>\n            ) : (\n              filteredConversations.map((conversation: any) => (\n                <div\n                  key={conversation.userId}\n                  className={`border-b border-border hover:bg-muted/50 cursor-pointer transition-colors ${\n                    selectedUserId === conversation.userId ? 'bg-muted/50' : ''\n                  }`}\n                  onClick={() => setSelectedUserId(conversation.userId)}\n                  data-testid={`conversation-${conversation.userId}`}\n                >\n                  <div className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarImage src=\"\" alt={conversation.userName} />\n                        <AvatarFallback>\n                          {conversation.userName.split(' ').map((n: string) => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium text-foreground truncate\" data-testid={`text-conversation-name-${conversation.userId}`}>\n                            {conversation.userName}\n                          </h4>\n                          <span className=\"text-xs text-muted-foreground\" data-testid={`text-conversation-time-${conversation.userId}`}>\n                            {new Date(conversation.lastMessageTime).toLocaleTimeString('en-US', {\n                              hour: 'numeric',\n                              minute: '2-digit',\n                              hour12: true,\n                            })}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-conversation-preview-${conversation.userId}`}>\n                            {conversation.lastMessage}\n                          </p>\n                          {conversation.unreadCount > 0 && (\n                            <Badge variant=\"default\" className=\"bg-primary text-primary-foreground text-xs px-2 py-0.5\" data-testid={`badge-unread-${conversation.userId}`}>\n                              {conversation.unreadCount}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n        \n        {/* Chat Messages */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedUserId ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-border bg-card\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarImage src=\"\" alt={selectedConversation?.userName} />\n                      <AvatarFallback>\n                        {selectedConversation?.userName.split(' ').map((n: string) => n[0]).join('') || '?'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-medium text-foreground\" data-testid=\"text-active-chat-name\">\n                        {selectedConversation?.userName}\n                      </h3>\n                      <div className=\"flex items-center\">\n                        <span className=\"status-dot status-online mr-2\"></span>\n                        <span className=\"text-sm text-secondary\" data-testid=\"text-online-status\">Online</span>\n                      </div>\n                    </div>\n                  </div>\n                  <Button \n                    onClick={handleStartVideoCall}\n                    className=\"bg-secondary hover:bg-secondary/90\"\n                    data-testid=\"button-start-video-call\"\n                  >\n                    <Video className=\"w-4 h-4 mr-2\" />\n                    Video Call\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Messages Area */}\n              <div className=\"flex-1 overflow-y-auto p-4 bg-muted/20\">\n                <div className=\"space-y-4\">\n                  {messagesLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"flex space-x-3\">\n                            <div className=\"rounded-full bg-muted h-8 w-8\"></div>\n                            <div className=\"bg-muted rounded-lg p-3 w-64 h-12\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : messages.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\" data-testid=\"text-no-messages\">\n                        No messages yet. Start the conversation!\n                      </p>\n                    </div>\n                  ) : (\n                    messages.map((message) => (\n                      <ChatMessageBubble\n                        key={message.id}\n                        message={message}\n                        isOwn={message.senderId === user?.id}\n                        senderName={message.senderId === user?.id ? 'You' : selectedConversation?.userName || 'Unknown'}\n                      />\n                    ))\n                  )}\n                  <div ref={messagesEndRef} />\n                </div>\n              </div>\n              \n              {/* Message Input */}\n              <div className=\"p-4 border-t border-border bg-card\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-1 relative\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Type your message...\"\n                      value={messageInput}\n                      onChange={(e) => setMessageInput(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      className=\"pr-12\"\n                      data-testid=\"input-message\"\n                    />\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-1 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                      data-testid=\"button-attach-file\"\n                    >\n                      <Paperclip className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <Button \n                    onClick={handleSendMessage}\n                    disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-select-conversation\">\n                  Select a conversation\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  Choose a conversation from the sidebar to start messaging\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13791},"client/src/pages/DoctorDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport AppointmentCard from '@/components/AppointmentCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Calendar, Users, Clock, CheckCircle } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\nexport default function DoctorDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: todayAppointments, isLoading } = useQuery({\n    queryKey: ['/api/appointments/today'],\n  });\n\n  const handleStartChat = (appointmentId: string) => {\n    setLocation('/chat');\n  };\n\n  const handleStartVideoCall = (appointmentId: string) => {\n    setLocation('/video-call');\n  };\n\n  const completedAppointments = Array.isArray(todayAppointments) ? todayAppointments.filter((apt: any) => apt.status === 'completed').length : 0;\n  const totalAppointments = Array.isArray(todayAppointments) ? todayAppointments.length : 0;\n  const remainingAppointments = totalAppointments - completedAppointments;\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType=\"doctor\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Doctor Dashboard\" \n          subtitle=\"Manage your patients and appointments\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"status-dot status-online\"></span>\n            <span className=\"text-sm text-secondary font-medium\" data-testid=\"text-status\">Online</span>\n          </div>\n        </Header>\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Today's Appointments</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-today-date\">\n                    {new Date().toLocaleDateString('en-US', { \n                      weekday: 'long', \n                      year: 'numeric', \n                      month: 'long', \n                      day: 'numeric' \n                    })}\n                  </p>\n                </div>\n                <CardContent className=\"p-6\">\n                  {isLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse flex space-x-4 p-4\">\n                          <div className=\"rounded-full bg-muted h-12 w-12\"></div>\n                          <div className=\"space-y-2 flex-1\">\n                            <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                            <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : Array.isArray(todayAppointments) && todayAppointments.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"text-no-appointments\">No appointments today</p>\n                    </div>\n                  ) : (\n                    Array.isArray(todayAppointments) ? todayAppointments.map((appointment: any) => (\n                      <AppointmentCard\n                        key={appointment.id}\n                        appointment={appointment}\n                        userRole=\"doctor\"\n                        onStartChat={handleStartChat}\n                        onStartVideoCall={handleStartVideoCall}\n                      />\n                    )) : null\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Quick Stats */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Today's Overview</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Total Appointments</span>\n                      <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-total-appointments\">\n                        {totalAppointments}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Completed</span>\n                      <span className=\"text-sm font-medium text-secondary\" data-testid=\"text-completed-appointments\">\n                        {completedAppointments}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Remaining</span>\n                      <span className=\"text-sm font-medium text-primary\" data-testid=\"text-remaining-appointments\">\n                        {remainingAppointments}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-4\">Patient Messages</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3\" data-testid=\"message-preview-1\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src=\"\" alt=\"Emma Wilson\" />\n                        <AvatarFallback>EW</AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-foreground\">Emma Wilson</p>\n                        <p className=\"text-xs text-muted-foreground\">Thank you for the consultation...</p>\n                      </div>\n                      <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                    </div>\n                    <div className=\"flex items-center space-x-3\" data-testid=\"message-preview-2\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src=\"\" alt=\"David Lee\" />\n                        <AvatarFallback>DL</AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-foreground\">David Lee</p>\n                        <p className=\"text-xs text-muted-foreground\">Question about medication...</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7226},"client/src/pages/DoctorList.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthContext';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport DoctorCard from '@/components/DoctorCard';\nimport Navbar from '@/components/Navbar';\nimport Footer from '@/components/Footer';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, UserRound } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { featuredDoctors } from '@/mock/doctors';\n\nexport default function DoctorList() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [specialtyFilter, setSpecialtyFilter] = useState('');\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  // Try to fetch from API if user is authenticated, otherwise use mock data\n  const { data: apiDoctors, isLoading } = useQuery({\n    queryKey: ['/api/doctors'],\n    enabled: !!user, // Only fetch if user is authenticated\n  });\n\n  // Use API data if available, otherwise fall back to mock data\n  const doctors = apiDoctors || featuredDoctors;\n\n  const handleBookAppointment = (doctorId: string) => {\n    setLocation(`/appointment-booking?doctorId=${doctorId}`);\n  };\n\n  const filteredDoctors = Array.isArray(doctors) ? doctors.filter((doctor: any) => {\n    const matchesSearch = doctor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         doctor.specialty.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesSpecialty = !specialtyFilter || specialtyFilter === 'all' || doctor.specialty.toLowerCase() === specialtyFilter.toLowerCase();\n    return matchesSearch && matchesSpecialty;\n  }) : [];\n\n  const specialties = Array.isArray(doctors) ? Array.from(new Set(doctors.map((doctor: any) => doctor.specialty))) : [];\n\n  // If user is not authenticated, show public version\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Find Doctors</h1>\n            <p className=\"text-xl text-gray-600\">Browse and book appointments with our specialists</p>\n          </div>\n\n          <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n            <div className=\"relative flex-1\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search doctors...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-doctors\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            </div>\n            <Select value={specialtyFilter} onValueChange={setSpecialtyFilter}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-specialty-filter\">\n                <SelectValue placeholder=\"All Specialties\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Specialties</SelectItem>\n                {specialties.map((specialty: string) => (\n                  <SelectItem key={specialty} value={specialty.toLowerCase()}>\n                    {specialty}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl shadow-lg p-6 animate-pulse\">\n                  <div className=\"w-20 h-20 bg-gray-200 rounded-full mx-auto mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredDoctors.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <UserRound className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No doctors found</h3>\n              <p className=\"text-gray-500\">Try adjusting your search criteria</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredDoctors.map((doctor: any) => (\n                <DoctorCard\n                  key={doctor.id}\n                  doctor={doctor}\n                />\n              ))}\n            </div>\n          )}\n          \n          <div className=\"text-center mt-12\">\n            <p className=\"text-gray-600 mb-4\">Ready to book an appointment?</p>\n            <button \n              onClick={() => setLocation('/login')}\n              className=\"bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors\"\n            >\n              Login to Book Appointment\n            </button>\n          </div>\n        </div>\n        \n        <Footer />\n      </div>\n    );\n  }\n\n  // Authenticated user version\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType=\"patient\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Find Doctors\" \n          subtitle=\"Browse and book appointments with our specialists\"\n        >\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search doctors...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-64\"\n                data-testid=\"input-search-doctors\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            </div>\n            <Select value={specialtyFilter} onValueChange={setSpecialtyFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-specialty-filter\">\n                <SelectValue placeholder=\"All Specialties\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Specialties</SelectItem>\n                {specialties.map((specialty: string) => (\n                  <SelectItem key={specialty} value={specialty.toLowerCase()}>\n                    {specialty}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </Header>\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-muted rounded-lg h-64\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredDoctors.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <UserRound className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No doctors found</h3>\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-doctors\">\n                {searchQuery || specialtyFilter ? 'Try adjusting your search criteria' : 'No doctors are available at the moment'}\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredDoctors.map((doctor: any) => (\n                <DoctorCard\n                  key={doctor.id}\n                  doctor={doctor}\n                />\n              ))}\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8258},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/context/AuthContext';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Heart } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [isSignup, setIsSignup] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    role: 'patient',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { login, signup } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (isSignup) {\n        await signup(formData);\n      } else {\n        await login(formData.email, formData.password, formData.role);\n      }\n      \n      // Redirect based on role\n      setLocation(`/${formData.role}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Authentication failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-secondary/10 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary rounded-full mb-4\">\n            <Heart className=\"text-primary-foreground w-8 h-8\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-app-title\">HealthCare Pro</h1>\n          <p className=\"text-muted-foreground mt-2\" data-testid=\"text-app-subtitle\">Smart Health Management System</p>\n        </div>\n        \n        <Card className=\"fade-in\">\n          <CardContent className=\"p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex space-x-1 bg-muted p-1 rounded-md\">\n                <Button\n                  variant={!isSignup ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"flex-1\"\n                  onClick={() => setIsSignup(false)}\n                  data-testid=\"button-login-tab\"\n                >\n                  Login\n                </Button>\n                <Button\n                  variant={isSignup ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"flex-1\"\n                  onClick={() => setIsSignup(true)}\n                  data-testid=\"button-signup-tab\"\n                >\n                  Sign Up\n                </Button>\n              </div>\n            </div>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {isSignup && (\n                <>\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      placeholder=\"Enter your first name\"\n                      required\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      placeholder=\"Enter your last name\"\n                      required\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </>\n              )}\n              \n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  placeholder=\"Enter your email\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  placeholder={isSignup ? \"Create a password\" : \"Enter your password\"}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"role\">Role</Label>\n                <Select value={formData.role} onValueChange={(value) => handleInputChange('role', value)}>\n                  <SelectTrigger data-testid=\"select-role\">\n                    <SelectValue placeholder=\"Select your role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"patient\">Patient</SelectItem>\n                    <SelectItem value=\"doctor\">Doctor</SelectItem>\n                    {!isSignup && <SelectItem value=\"admin\">Admin</SelectItem>}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-submit\"\n              >\n                {isLoading ? 'Please wait...' : (isSignup ? 'Create Account' : 'Sign In')}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6378},"client/src/pages/PatientDashboard.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport AppointmentCard from '@/components/AppointmentCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, UserRound, MessageCircle, CalendarPlus, FileText, Pill } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\nexport default function PatientDashboard() {\n  const [, setLocation] = useLocation();\n\n  const { data: appointments, isLoading } = useQuery({\n    queryKey: ['/api/appointments'],\n  });\n\n  const handleStartChat = (appointmentId: string) => {\n    setLocation('/chat');\n  };\n\n  const handleStartVideoCall = (appointmentId: string) => {\n    setLocation('/video-call');\n  };\n\n  const handleBookAppointment = () => {\n    setLocation('/appointment-booking');\n  };\n\n  const upcomingAppointments = Array.isArray(appointments) ? appointments.filter((apt: any) => \n    new Date(apt.appointmentDate) > new Date()\n  ) : [];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType=\"patient\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle=\"Welcome back, stay healthy!\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-primary/10 rounded-lg\">\n                    <Calendar className=\"text-primary w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Upcoming Appointments</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-upcoming-appointments\">\n                      {upcomingAppointments.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-secondary/10 rounded-lg\">\n                    <UserRound className=\"text-secondary w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">Available Doctors</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-active-doctors\">12</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 bg-accent rounded-lg\">\n                    <MessageCircle className=\"text-accent-foreground w-6 h-6\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm text-muted-foreground\">New Messages</p>\n                    <p className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-new-messages\">2</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Upcoming Appointments */}\n            <Card>\n              <div className=\"p-6 border-b border-border flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Upcoming Appointments</h3>\n                <Button onClick={handleBookAppointment} data-testid=\"button-book-new\">\n                  Book New\n                </Button>\n              </div>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(2)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse flex space-x-4 p-4\">\n                        <div className=\"rounded-full bg-muted h-12 w-12\"></div>\n                        <div className=\"space-y-2 flex-1\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : upcomingAppointments.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\" data-testid=\"text-no-appointments\">No upcoming appointments</p>\n                    <Button className=\"mt-4\" onClick={handleBookAppointment} data-testid=\"button-book-first\">\n                      Book Your First Appointment\n                    </Button>\n                  </div>\n                ) : (\n                  upcomingAppointments.map((appointment: any) => (\n                    <AppointmentCard\n                      key={appointment.id}\n                      appointment={appointment}\n                      userRole=\"patient\"\n                      onStartChat={handleStartChat}\n                      onStartVideoCall={handleStartVideoCall}\n                    />\n                  ))\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Recent Activity */}\n            <Card>\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Recent Activity</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-1\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <CalendarPlus className=\"text-primary w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-foreground\">Appointment booked with Dr. Sarah Johnson</p>\n                      <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-2\">\n                    <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                      <FileText className=\"text-secondary w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-foreground\">Lab results received from Dr. Michael Chen</p>\n                      <p className=\"text-xs text-muted-foreground\">1 day ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\" data-testid=\"activity-item-3\">\n                    <div className=\"p-2 bg-accent rounded-lg\">\n                      <Pill className=\"text-accent-foreground w-4 h-4\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-foreground\">Prescription updated for ongoing treatment</p>\n                      <p className=\"text-xs text-muted-foreground\">3 days ago</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7718},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/context/AuthContext';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport Header from '@/components/Layout/Header';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Camera, Save, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/services/api';\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    address: '',\n    emergencyContact: '',\n    emergencyPhone: '',\n    medicalHistory: '',\n  });\n  \n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Initialize form data with user data\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        dateOfBirth: user.dateOfBirth || '',\n        address: user.address || '',\n        emergencyContact: user.emergencyContact || '',\n        emergencyPhone: user.emergencyPhone || '',\n        medicalHistory: user.medicalHistory || '',\n      });\n    }\n  }, [user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      return apiRequest('PUT', '/api/profile', updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      setHasChanges(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        dateOfBirth: user.dateOfBirth || '',\n        address: user.address || '',\n        emergencyContact: user.emergencyContact || '',\n        emergencyPhone: user.emergencyPhone || '',\n        medicalHistory: user.medicalHistory || '',\n      });\n      setHasChanges(false);\n    }\n  };\n\n  const handleChangePhoto = () => {\n    // In a real implementation, this would open a file picker\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"Photo upload functionality will be implemented\",\n    });\n  };\n\n  const getSidebarType = () => {\n    if (user?.role === 'patient') return 'patient';\n    if (user?.role === 'doctor') return 'doctor';\n    return 'admin';\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar userType={getSidebarType()} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Profile Settings\" \n          subtitle=\"Manage your personal information\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Profile Picture & Basic Info */}\n              <div className=\"lg:col-span-1\">\n                <Card>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"relative inline-block mb-4\">\n                      <Avatar className=\"w-24 h-24 mx-auto\">\n                        <AvatarImage src=\"\" alt={`${user?.firstName} ${user?.lastName}`} />\n                        <AvatarFallback className=\"text-2xl\">\n                          {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <Button\n                        size=\"sm\"\n                        variant=\"secondary\"\n                        className=\"absolute -bottom-2 -right-2 h-8 w-8 rounded-full p-0\"\n                        onClick={handleChangePhoto}\n                        data-testid=\"button-change-photo\"\n                      >\n                        <Camera className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    \n                    <h3 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-user-name\">\n                      {user?.firstName} {user?.lastName}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">\n                      {user?.email}\n                    </p>\n                    <p className=\"text-sm text-primary font-medium mt-2\">\n                      {user?.role === 'patient' && 'Patient ID: #P12345'}\n                      {user?.role === 'doctor' && 'Doctor ID: #D12345'}\n                      {user?.role === 'admin' && 'Admin ID: #A12345'}\n                    </p>\n                    \n                    <div className=\"mt-6 space-y-2\">\n                      <div className=\"text-sm\">\n                        <span className=\"text-muted-foreground\">Role: </span>\n                        <span className=\"font-medium capitalize\" data-testid=\"text-user-role\">\n                          {user?.role}\n                        </span>\n                      </div>\n                      <div className=\"text-sm\">\n                        <span className=\"text-muted-foreground\">Member since: </span>\n                        <span className=\"font-medium\" data-testid=\"text-member-since\">\n                          {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              {/* Profile Form */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-6\">\n                      <h3 className=\"text-lg font-semibold text-foreground\">Personal Information</h3>\n                      {hasChanges && (\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={handleCancel}\n                            data-testid=\"button-cancel-changes\"\n                          >\n                            <X className=\"w-4 h-4 mr-1\" />\n                            Cancel\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            onClick={handleSave}\n                            disabled={updateProfileMutation.isPending}\n                            data-testid=\"button-save-changes\"\n                          >\n                            <Save className=\"w-4 h-4 mr-1\" />\n                            {updateProfileMutation.isPending ? 'Saving...' : 'Save'}\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"firstName\">First Name</Label>\n                          <Input\n                            id=\"firstName\"\n                            type=\"text\"\n                            value={formData.firstName}\n                            onChange={(e) => handleInputChange('firstName', e.target.value)}\n                            data-testid=\"input-first-name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"lastName\">Last Name</Label>\n                          <Input\n                            id=\"lastName\"\n                            type=\"text\"\n                            value={formData.lastName}\n                            onChange={(e) => handleInputChange('lastName', e.target.value)}\n                            data-testid=\"input-last-name\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"email\">Email Address</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => handleInputChange('email', e.target.value)}\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"phone\">Phone Number</Label>\n                          <Input\n                            id=\"phone\"\n                            type=\"tel\"\n                            value={formData.phone}\n                            onChange={(e) => handleInputChange('phone', e.target.value)}\n                            placeholder=\"+1 (555) 123-4567\"\n                            data-testid=\"input-phone\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                          <Input\n                            id=\"dateOfBirth\"\n                            type=\"date\"\n                            value={formData.dateOfBirth}\n                            onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                            data-testid=\"input-date-of-birth\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"address\">Address</Label>\n                        <Textarea\n                          id=\"address\"\n                          value={formData.address}\n                          onChange={(e) => handleInputChange('address', e.target.value)}\n                          placeholder=\"Enter your address\"\n                          className=\"h-20 resize-none\"\n                          data-testid=\"textarea-address\"\n                        />\n                      </div>\n                      \n                      {user?.role === 'patient' && (\n                        <>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                              <Input\n                                id=\"emergencyContact\"\n                                type=\"text\"\n                                value={formData.emergencyContact}\n                                onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                                placeholder=\"Emergency contact name\"\n                                data-testid=\"input-emergency-contact\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"emergencyPhone\">Emergency Phone</Label>\n                              <Input\n                                id=\"emergencyPhone\"\n                                type=\"tel\"\n                                value={formData.emergencyPhone}\n                                onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}\n                                placeholder=\"+1 (555) 987-6543\"\n                                data-testid=\"input-emergency-phone\"\n                              />\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"medicalHistory\">Medical History</Label>\n                            <Textarea\n                              id=\"medicalHistory\"\n                              value={formData.medicalHistory}\n                              onChange={(e) => handleInputChange('medicalHistory', e.target.value)}\n                              placeholder=\"Brief medical history, allergies, current medications...\"\n                              className=\"h-24 resize-none\"\n                              data-testid=\"textarea-medical-history\"\n                            />\n                          </div>\n                        </>\n                      )}\n                      \n                      {!hasChanges && (\n                        <div className=\"flex justify-end\">\n                          <Button \n                            onClick={handleSave}\n                            disabled={updateProfileMutation.isPending}\n                            data-testid=\"button-save-profile\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            {updateProfileMutation.isPending ? 'Saving...' : 'Save Changes'}\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14198},"client/src/pages/VideoCall.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/context/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Mic, MicOff, Video, VideoOff, Monitor, Phone, MessageCircle, Volume2 } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\nexport default function VideoCall() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [callDuration, setCallDuration] = useState('00:00');\n  const [startTime] = useState(Date.now());\n\n  // Update call duration\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const elapsed = Math.floor((Date.now() - startTime) / 1000);\n      const minutes = Math.floor(elapsed / 60);\n      const seconds = elapsed % 60;\n      setCallDuration(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [startTime]);\n\n  const handleToggleMute = () => {\n    setIsMuted(!isMuted);\n    // In a real implementation, this would interact with WebRTC to mute/unmute the microphone\n  };\n\n  const handleToggleVideo = () => {\n    setIsVideoOn(!isVideoOn);\n    // In a real implementation, this would interact with WebRTC to turn camera on/off\n  };\n\n  const handleScreenShare = () => {\n    setIsScreenSharing(!isScreenSharing);\n    // In a real implementation, this would use getDisplayMedia() for screen sharing\n  };\n\n  const handleEndCall = () => {\n    // In a real implementation, this would close the WebRTC connection\n    setLocation('/chat');\n  };\n\n  const handleOpenChat = () => {\n    setLocation('/chat');\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-900 flex flex-col\">\n      {/* Video Call Header */}\n      <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"status-dot status-online\"></span>\n            <span className=\"text-white font-medium\" data-testid=\"text-call-participant\">\n              Dr. Sarah Johnson\n            </span>\n          </div>\n          <span className=\"text-gray-300 text-sm\" data-testid=\"text-call-duration\">\n            {callDuration}\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-gray-300 text-sm\">Consultation in progress</span>\n        </div>\n      </div>\n      \n      {/* Video Area */}\n      <div className=\"flex-1 relative bg-gray-900\">\n        {/* Remote Video (Doctor) - Main View */}\n        <div className=\"w-full h-full relative bg-gray-800 flex items-center justify-center\">\n          {/* Placeholder for remote video stream */}\n          <div className=\"w-full h-full bg-gradient-to-br from-blue-900 to-blue-700 flex items-center justify-center\">\n            <div className=\"text-center text-white\">\n              <div className=\"w-32 h-32 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-4xl font-bold\">SJ</span>\n              </div>\n              <h3 className=\"text-xl font-semibold\">Dr. Sarah Johnson</h3>\n              <p className=\"text-blue-200\">Cardiology Specialist</p>\n            </div>\n          </div>\n          \n          {/* Local Video (Patient) - Picture in Picture */}\n          <div className=\"absolute top-4 right-4 w-48 h-36 bg-gray-800 rounded-lg overflow-hidden border-2 border-gray-600\">\n            {isVideoOn ? (\n              <div className=\"w-full h-full bg-gradient-to-br from-green-900 to-green-700 flex items-center justify-center\">\n                <div className=\"text-center text-white\">\n                  <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <span className=\"text-lg font-bold\">\n                      {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm\">You</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full h-full bg-gray-700 flex items-center justify-center\">\n                <VideoOff className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            )}\n          </div>\n          \n          {/* Video Call Controls Overlay */}\n          <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2\">\n            <div className=\"flex items-center space-x-4 bg-gray-800/90 backdrop-blur-sm rounded-full px-6 py-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={`w-12 h-12 rounded-full flex items-center justify-center text-white transition-colors ${\n                  isMuted ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-700 hover:bg-gray-600'\n                }`}\n                onClick={handleToggleMute}\n                data-testid=\"button-toggle-mute\"\n              >\n                {isMuted ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={`w-12 h-12 rounded-full flex items-center justify-center text-white transition-colors ${\n                  !isVideoOn ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-700 hover:bg-gray-600'\n                }`}\n                onClick={handleToggleVideo}\n                data-testid=\"button-toggle-video\"\n              >\n                {isVideoOn ? <Video className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={`w-12 h-12 rounded-full flex items-center justify-center text-white transition-colors ${\n                  isScreenSharing ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-700 hover:bg-gray-600'\n                }`}\n                onClick={handleScreenShare}\n                data-testid=\"button-screen-share\"\n              >\n                <Monitor className=\"w-5 h-5\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-12 h-12 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors\"\n                data-testid=\"button-volume-settings\"\n              >\n                <Volume2 className=\"w-5 h-5\" />\n              </Button>\n              \n              <Button\n                variant=\"destructive\"\n                size=\"icon\"\n                className=\"w-12 h-12 rounded-full flex items-center justify-center transition-colors\"\n                onClick={handleEndCall}\n                data-testid=\"button-end-call\"\n              >\n                <Phone className=\"w-5 h-5 transform rotate-180\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-12 h-12 bg-gray-700 hover:bg-gray-600 rounded-full flex items-center justify-center text-white transition-colors\"\n                onClick={handleOpenChat}\n                data-testid=\"button-open-chat\"\n              >\n                <MessageCircle className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Call Info */}\n          <div className=\"absolute top-4 left-4 bg-gray-800/90 backdrop-blur-sm rounded-lg px-4 py-2\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"status-dot status-online\"></span>\n              <span className=\"text-white text-sm font-medium\" data-testid=\"text-connection-status\">\n                Connection: Excellent\n              </span>\n            </div>\n          </div>\n          \n          {/* Mute Indicator */}\n          {isMuted && (\n            <div className=\"absolute top-20 left-4 bg-red-600/90 backdrop-blur-sm rounded-lg px-3 py-2\">\n              <div className=\"flex items-center space-x-2\">\n                <MicOff className=\"w-4 h-4 text-white\" />\n                <span className=\"text-white text-sm font-medium\" data-testid=\"text-mute-indicator\">\n                  You are muted\n                </span>\n              </div>\n            </div>\n          )}\n          \n          {/* Screen Share Indicator */}\n          {isScreenSharing && (\n            <div className=\"absolute top-4 right-60 bg-blue-600/90 backdrop-blur-sm rounded-lg px-3 py-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Monitor className=\"w-4 h-4 text-white\" />\n                <span className=\"text-white text-sm font-medium\" data-testid=\"text-screen-share-indicator\">\n                  Sharing screen\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9078},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"export async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown,\n): Promise<Response> {\n  const token = localStorage.getItem('jwt_token');\n  \n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers['Content-Type'] = 'application/json';\n  }\n  \n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const response = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`${response.status}: ${errorText}`);\n  }\n\n  return response;\n}\n","size_bytes":623},"client/src/services/socket.ts":{"content":"import { Message } from '@shared/schema';\n\nclass SocketService {\n  private socket: WebSocket | null = null;\n  private messageHandlers: ((message: Message) => void)[] = [];\n  private authHandlers: (() => void)[] = [];\n\n  connect(userId: string) {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    this.socket = new WebSocket(wsUrl);\n\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n      this.authenticate(userId);\n    };\n\n    this.socket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'auth' && data.status === 'success') {\n          this.authHandlers.forEach(handler => handler());\n        } else if (data.type === 'new_message') {\n          this.messageHandlers.forEach(handler => handler(data.message));\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    this.socket.onclose = () => {\n      console.log('WebSocket disconnected');\n      // Implement reconnection logic if needed\n    };\n\n    this.socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private authenticate(userId: string) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify({\n        type: 'auth',\n        userId,\n      }));\n    }\n  }\n\n  sendMessage(senderId: string, receiverId: string, content: string) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify({\n        type: 'chat_message',\n        senderId,\n        receiverId,\n        content,\n      }));\n    }\n  }\n\n  onMessage(handler: (message: Message) => void) {\n    this.messageHandlers.push(handler);\n  }\n\n  onAuth(handler: () => void) {\n    this.authHandlers.push(handler);\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.messageHandlers = [];\n    this.authHandlers = [];\n  }\n}\n\nexport const socketService = new SocketService();\n","size_bytes":2133},"client/src/components/Layout/Header.tsx":{"content":"import { useAuth } from '@/context/AuthContext';\nimport { Bell, User } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  children?: React.ReactNode;\n}\n\nexport default function Header({ title, subtitle, children }: HeaderProps) {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"header-title\">{title}</h1>\n          {subtitle && <p className=\"text-muted-foreground\" data-testid=\"header-subtitle\">{subtitle}</p>}\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {children}\n          <button className=\"relative p-2 text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n          </button>\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src=\"\" alt={user?.firstName} />\n              <AvatarFallback>\n                <User className=\"w-4 h-4\" />\n              </AvatarFallback>\n            </Avatar>\n            <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-username\">\n              {user?.firstName} {user?.lastName}\n            </span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1641},"client/src/components/Layout/Sidebar.tsx":{"content":"import { useAuth } from '@/context/AuthContext';\nimport { Link, useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  UserRound, \n  MessageCircle, \n  Video, \n  User, \n  Users, \n  Calendar,\n  BarChart3,\n  LogOut,\n  Heart\n} from 'lucide-react';\n\ninterface SidebarProps {\n  userType: 'patient' | 'doctor' | 'admin';\n}\n\nexport default function Sidebar({ userType }: SidebarProps) {\n  const { logout } = useAuth();\n  const [location] = useLocation();\n\n  const getNavigationItems = () => {\n    const baseItems = [\n      { path: `/${userType}`, icon: LayoutDashboard, label: 'Dashboard' },\n    ];\n\n    if (userType === 'patient') {\n      return [\n        ...baseItems,\n        { path: '/doctors', icon: UserRound, label: 'Find Doctors' },\n        { path: '/chat', icon: MessageCircle, label: 'Chat' },\n        { path: '/video-call', icon: Video, label: 'Video Call' },\n        { path: '/profile', icon: User, label: 'Profile' },\n      ];\n    }\n\n    if (userType === 'doctor') {\n      return [\n        ...baseItems,\n        { path: '/patients', icon: Users, label: 'Patients' },\n        { path: '/chat', icon: MessageCircle, label: 'Chat' },\n        { path: '/video-call', icon: Video, label: 'Video Call' },\n        { path: '/profile', icon: User, label: 'Profile' },\n      ];\n    }\n\n    if (userType === 'admin') {\n      return [\n        ...baseItems,\n        { path: '/manage-doctors', icon: UserRound, label: 'Manage Doctors' },\n        { path: '/manage-users', icon: Users, label: 'Manage Users' },\n        { path: '/appointments', icon: Calendar, label: 'Appointments' },\n        { path: '/analytics', icon: BarChart3, label: 'Analytics' },\n      ];\n    }\n\n    return baseItems;\n  };\n\n  const navigationItems = getNavigationItems();\n  const portalName = userType.charAt(0).toUpperCase() + userType.slice(1) + ' Portal';\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <Heart className=\"text-primary-foreground w-5 h-5\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-foreground\">HealthCare Pro</h2>\n            <p className=\"text-sm text-muted-foreground\">{portalName}</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <li key={item.path}>\n                <Link \n                  href={item.path}\n                  className={`flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                    isActive \n                      ? 'bg-primary text-primary-foreground' \n                      : 'hover:bg-accent text-foreground'\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span>{item.label}</span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <button \n          onClick={logout}\n          className=\"w-full flex items-center space-x-3 px-3 py-2 text-sm font-medium text-destructive hover:bg-destructive/10 rounded-md transition-colors\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3753},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/FeatureCard.tsx":{"content":"interface FeatureCardProps {\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n  description: string;\n  bgColor?: string;\n}\n\nexport default function FeatureCard({ icon: Icon, title, description, bgColor = \"bg-blue-50\" }: FeatureCardProps) {\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300\">\n      <div className={`w-12 h-12 ${bgColor} rounded-lg flex items-center justify-center mb-4`}>\n        <Icon className=\"w-6 h-6 text-blue-600\" />\n      </div>\n      <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">{title}</h3>\n      <p className=\"text-gray-600 leading-relaxed\">{description}</p>\n    </div>\n  );\n}","size_bytes":697},"client/src/components/Footer.tsx":{"content":"import { Heart, Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Logo and Description */}\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                <Heart className=\"text-white w-5 h-5\" />\n              </div>\n              <span className=\"text-xl font-bold\">Smart Health Care</span>\n            </div>\n            <p className=\"text-gray-400 mb-4 max-w-md\">\n              Connecting patients with certified doctors through secure video consultations, \n              instant messaging, and easy appointment booking.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Facebook className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n              <Twitter className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n              <Instagram className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n              <Linkedin className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer transition-colors\" />\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/about\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/doctors\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Find Doctors\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/appointments\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Book Appointment\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Contact Us\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Legal */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Legal</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Terms of Service\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/disclaimer\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Medical Disclaimer\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/support\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Support\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            © {new Date().getFullYear()} Smart Health Care. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":3726},"client/src/components/Navbar.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Menu, X, Heart } from 'lucide-react';\n\nexport default function Navbar() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  return (\n    <nav className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n              <Heart className=\"text-white w-5 h-5\" />\n            </div>\n            <span className=\"text-xl font-bold text-gray-800\">Smart Health Care</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">\n              Home\n            </Link>\n            <Link href=\"/doctors\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">\n              Doctors\n            </Link>\n            <Link href=\"/appointment-booking\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">\n              Book Appointment\n            </Link>\n            <Link href=\"/contact\" className=\"text-gray-700 hover:text-blue-600 font-medium transition-colors\">\n              Contact\n            </Link>\n          </div>\n\n          {/* Desktop Auth Buttons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link href=\"/login\">\n              <button className=\"text-blue-600 hover:text-blue-700 font-medium transition-colors\">\n                Login\n              </button>\n            </Link>\n            <Link href=\"/login\">\n              <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\">\n                Sign Up\n              </button>\n            </Link>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button\n              onClick={toggleMenu}\n              className=\"text-gray-700 hover:text-blue-600 focus:outline-none\"\n            >\n              {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t\">\n              <Link href=\"/\" className=\"block px-3 py-2 text-gray-700 hover:text-blue-600 font-medium\">\n                Home\n              </Link>\n              <Link href=\"/doctors\" className=\"block px-3 py-2 text-gray-700 hover:text-blue-600 font-medium\">\n                Doctors\n              </Link>\n              <Link href=\"/appointment-booking\" className=\"block px-3 py-2 text-gray-700 hover:text-blue-600 font-medium\">\n                Book Appointment\n              </Link>\n              <Link href=\"/contact\" className=\"block px-3 py-2 text-gray-700 hover:text-blue-600 font-medium\">\n                Contact\n              </Link>\n              <div className=\"border-t pt-3 mt-3\">\n                <Link href=\"/login\" className=\"block px-3 py-2 text-blue-600 font-medium\">\n                  Login\n                </Link>\n                <Link href=\"/login\" className=\"block px-3 py-2\">\n                  <span className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors inline-block\">\n                    Sign Up\n                  </span>\n                </Link>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}","size_bytes":3846},"client/src/mock/doctors.ts":{"content":"export const featuredDoctors = [\n  {\n    id: 1,\n    name: \"Dr. Sarah Johnson\",\n    specialty: \"Cardiologist\",\n    rating: 4.8,\n    reviewCount: 124,\n    experience: \"12 years\",\n    image: \"/api/placeholder/120/120\"\n  },\n  {\n    id: 2,\n    name: \"Dr. Michael Chen\",\n    specialty: \"Dermatologist\",\n    rating: 4.9,\n    reviewCount: 98,\n    experience: \"8 years\",\n    image: \"/api/placeholder/120/120\"\n  },\n  {\n    id: 3,\n    name: \"Dr. Emily Rodriguez\",\n    specialty: \"Pediatrician\",\n    rating: 4.7,\n    reviewCount: 156,\n    experience: \"10 years\",\n    image: \"/api/placeholder/120/120\"\n  },\n  {\n    id: 4,\n    name: \"Dr. David Wilson\",\n    specialty: \"Neurologist\",\n    rating: 4.9,\n    reviewCount: 89,\n    experience: \"15 years\",\n    image: \"/api/placeholder/120/120\"\n  }\n];","size_bytes":779},"client/src/mock/testimonials.ts":{"content":"export const testimonials = [\n  {\n    id: 1,\n    name: \"Jessica Thompson\",\n    avatar: \"/api/placeholder/60/60\",\n    feedback: \"Amazing experience! Dr. Johnson was very professional and the video consultation was smooth. Highly recommend this platform.\",\n    rating: 5,\n    location: \"New York\"\n  },\n  {\n    id: 2,\n    name: \"Robert Martinez\",\n    avatar: \"/api/placeholder/60/60\",\n    feedback: \"Quick and convenient. Got my prescription within minutes of the consultation. The chat feature is also very helpful.\",\n    rating: 5,\n    location: \"California\"\n  },\n  {\n    id: 3,\n    name: \"Lisa Anderson\",\n    avatar: \"/api/placeholder/60/60\",\n    feedback: \"Great platform for busy parents. Being able to consult a pediatrician from home saved me so much time.\",\n    rating: 4,\n    location: \"Texas\"\n  }\n];","size_bytes":806},"client/src/pages/Contact.tsx":{"content":"import { useState } from 'react';\nimport { MessageCircle, Phone, Mail, MapPin, Clock, Send, X, HelpCircle } from 'lucide-react';\nimport Navbar from '@/components/Navbar';\nimport Footer from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\n\nexport default function Contact() {\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([\n    {\n      id: 1,\n      text: \"Hello! I'm here to help you navigate our healthcare platform. How can I assist you today?\",\n      isBot: true,\n      timestamp: new Date()\n    }\n  ]);\n  const [currentMessage, setCurrentMessage] = useState('');\n\n  const quickHelp = [\n    \"How do I book an appointment?\",\n    \"How do I find a doctor?\",\n    \"What are your consultation types?\",\n    \"How do I create an account?\",\n    \"What are your operating hours?\",\n    \"How much do consultations cost?\"\n  ];\n\n  const handleSendMessage = () => {\n    if (!currentMessage.trim()) return;\n\n    const userMessage = {\n      id: chatMessages.length + 1,\n      text: currentMessage,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n\n    // Simple bot responses based on keywords\n    setTimeout(() => {\n      let botResponse = \"\";\n      const msg = currentMessage.toLowerCase();\n      \n      if (msg.includes('book') || msg.includes('appointment')) {\n        botResponse = \"To book an appointment: 1) Click 'Find Doctors' from the homepage 2) Browse our specialists 3) Click 'Book Appointment' on your preferred doctor 4) Login or create an account 5) Select your preferred date and time. Need help with any specific step?\";\n      } else if (msg.includes('doctor') || msg.includes('find')) {\n        botResponse = \"You can find doctors by clicking 'Doctors' in the navigation menu. Use the search bar to find doctors by name or specialty, or filter by medical specialties like Cardiology, Dermatology, etc.\";\n      } else if (msg.includes('account') || msg.includes('login') || msg.includes('sign')) {\n        botResponse = \"To create an account, click 'Login' in the top right corner, then select 'Sign Up'. You can register as a Patient or Doctor. Fill in your details and you'll be ready to use our platform!\";\n      } else if (msg.includes('cost') || msg.includes('price') || msg.includes('fee')) {\n        botResponse = \"Consultation fees vary by doctor and consultation type. Video consultations typically range from $50-150, while chat consultations are usually $25-75. Exact pricing is shown when you select a doctor.\";\n      } else if (msg.includes('hours') || msg.includes('time') || msg.includes('available')) {\n        botResponse = \"Our platform is available 24/7! Doctors set their own availability hours. You can see available time slots when booking with each doctor. Emergency consultations are available round the clock.\";\n      } else if (msg.includes('video') || msg.includes('chat') || msg.includes('consultation')) {\n        botResponse = \"We offer: 📹 Video Consultations - Face-to-face meetings with doctors 💬 Instant Chat - Text-based consultations 📅 Scheduled Appointments - Book for later 🚨 Emergency Consultations - Immediate care when needed\";\n      } else {\n        botResponse = \"I'd be happy to help! You can ask me about booking appointments, finding doctors, creating accounts, consultation types, or anything else about using our healthcare platform. What would you like to know?\";\n      }\n\n      const botMessage = {\n        id: chatMessages.length + 2,\n        text: botResponse,\n        isBot: true,\n        timestamp: new Date()\n      };\n\n      setChatMessages(prev => [...prev, botMessage]);\n    }, 1000);\n\n    setCurrentMessage('');\n  };\n\n  const handleQuickHelp = (question: string) => {\n    setCurrentMessage(question);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-4\">Contact Us</h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Get in touch with our support team or find answers to your questions\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Phone className=\"w-5 h-5 text-blue-600\" />\n                  Phone Support\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-2\">24/7 Emergency Support</p>\n                <p className=\"text-2xl font-semibold text-blue-600 mb-4\">1-800-HEALTH</p>\n                <p className=\"text-sm text-gray-500\">For urgent medical concerns, call our emergency hotline</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5 text-green-600\" />\n                  Email Support\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-2\">General Inquiries</p>\n                <p className=\"text-lg font-semibold text-green-600 mb-2\">support@smarthealthcare.com</p>\n                <p className=\"text-gray-600 mb-2\">Technical Support</p>\n                <p className=\"text-lg font-semibold text-green-600 mb-4\">tech@smarthealthcare.com</p>\n                <p className=\"text-sm text-gray-500\">Response time: 2-4 hours during business hours</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5 text-purple-600\" />\n                  Office Location\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <p className=\"font-semibold\">Smart Health Care HQ</p>\n                  <p className=\"text-gray-600\">123 Medical Center Drive</p>\n                  <p className=\"text-gray-600\">Healthcare City, HC 12345</p>\n                  <p className=\"text-gray-600\">United States</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5 text-orange-600\" />\n                  Business Hours\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Monday - Friday</span>\n                    <span className=\"font-semibold\">8:00 AM - 8:00 PM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Saturday</span>\n                    <span className=\"font-semibold\">9:00 AM - 6:00 PM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Sunday</span>\n                    <span className=\"font-semibold\">10:00 AM - 4:00 PM</span>\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-4\">\n                    Emergency support available 24/7\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Send us a Message</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      First Name\n                    </label>\n                    <Input placeholder=\"Your first name\" />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Last Name\n                    </label>\n                    <Input placeholder=\"Your last name\" />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Email Address\n                  </label>\n                  <Input type=\"email\" placeholder=\"your.email@example.com\" />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Subject\n                  </label>\n                  <Input placeholder=\"What can we help you with?\" />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Message\n                  </label>\n                  <Textarea \n                    placeholder=\"Tell us more about your inquiry...\"\n                    className=\"min-h-32\"\n                  />\n                </div>\n                \n                <Button className=\"w-full\">\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Send Message\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n\n      {/* Assist Chat Widget */}\n      {!isChatOpen && (\n        <button\n          onClick={() => setIsChatOpen(true)}\n          className=\"fixed bottom-6 right-6 bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition-colors z-50\"\n        >\n          <MessageCircle className=\"w-6 h-6\" />\n        </button>\n      )}\n\n      {/* Chat Modal */}\n      {isChatOpen && (\n        <div className=\"fixed bottom-6 right-6 w-96 bg-white rounded-lg shadow-2xl z-50 border\">\n          {/* Chat Header */}\n          <div className=\"bg-blue-600 text-white p-4 rounded-t-lg flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <HelpCircle className=\"w-5 h-5\" />\n              <span className=\"font-semibold\">Healthcare Assistant</span>\n            </div>\n            <button\n              onClick={() => setIsChatOpen(false)}\n              className=\"text-white hover:text-gray-200\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Quick Help Options */}\n          <div className=\"p-4 border-b bg-gray-50\">\n            <p className=\"text-sm text-gray-600 mb-2\">Quick Help:</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {quickHelp.slice(0, 3).map((question, index) => (\n                <button\n                  key={index}\n                  onClick={() => handleQuickHelp(question)}\n                  className=\"text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200 transition-colors\"\n                >\n                  {question}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"h-80 overflow-y-auto p-4 space-y-4\">\n            {chatMessages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}\n              >\n                <div\n                  className={`max-w-xs px-3 py-2 rounded-lg ${\n                    message.isBot\n                      ? 'bg-gray-100 text-gray-800'\n                      : 'bg-blue-600 text-white'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.text}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Chat Input */}\n          <div className=\"p-4 border-t\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={currentMessage}\n                onChange={(e) => setCurrentMessage(e.target.value)}\n                placeholder=\"Ask me anything...\"\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                className=\"flex-1\"\n              />\n              <Button onClick={handleSendMessage} size=\"sm\">\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12966},"client/src/pages/Homepage.tsx":{"content":"import { Video, MessageCircle, Calendar, Shield, Search, Clock, CheckCircle, Star } from 'lucide-react';\nimport { Link } from 'wouter';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport FeatureCard from '../components/FeatureCard';\nimport DoctorCard from '../components/DoctorCard';\nimport { featuredDoctors } from '../mock/doctors';\nimport { testimonials } from '../mock/testimonials';\n\nexport default function Homepage() {\n  const features = [\n    {\n      icon: Video,\n      title: \"Video Consultations\",\n      description: \"Connect with certified doctors through secure video calls from the comfort of your home.\",\n      bgColor: \"bg-blue-50\"\n    },\n    {\n      icon: MessageCircle,\n      title: \"Instant Chat\",\n      description: \"Get quick medical advice through our instant messaging platform with real-time responses.\",\n      bgColor: \"bg-green-50\"\n    },\n    {\n      icon: Calendar,\n      title: \"Easy Appointment Booking\",\n      description: \"Schedule appointments with your preferred doctors at convenient times that work for you.\",\n      bgColor: \"bg-purple-50\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure Medical Records\",\n      description: \"Your medical data is encrypted and stored securely with HIPAA-compliant protection.\",\n      bgColor: \"bg-red-50\"\n    }\n  ];\n\n  const steps = [\n    {\n      icon: Search,\n      title: \"Find a Doctor\",\n      description: \"Browse through our network of certified healthcare professionals and specialists.\"\n    },\n    {\n      icon: Clock,\n      title: \"Book Slot or Start Chat\",\n      description: \"Choose your preferred consultation method - video call, chat, or in-person appointment.\"\n    },\n    {\n      icon: CheckCircle,\n      title: \"Consult & Get Prescription\",\n      description: \"Receive professional medical advice and digital prescriptions instantly.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-blue-600 to-blue-800 text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\">\n                Consult Doctors Anytime, Anywhere\n              </h1>\n              <p className=\"text-xl md:text-2xl mb-8 text-blue-100\">\n                Book appointments, chat, or video call with certified doctors instantly.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/doctors\">\n                  <button className=\"bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors text-lg\">\n                    Find Doctors\n                  </button>\n                </Link>\n                <Link href=\"/appointment-booking\">\n                  <button className=\"border-2 border-white text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors text-lg\">\n                    Book Appointment\n                  </button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"flex justify-center lg:justify-end\">\n              <div className=\"w-full max-w-md h-80 bg-blue-500 rounded-lg flex items-center justify-center text-blue-200\">\n                <span className=\"text-lg font-medium\">Hero Image</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">\n              Why Choose Smart Health Care?\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Experience healthcare like never before with our comprehensive digital platform\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => (\n              <FeatureCard key={index} {...feature} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Get started with healthcare in just three simple steps\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <step.icon className=\"w-8 h-8 text-white\" />\n                </div>\n                <div className=\"relative\">\n                  <div className=\"absolute -top-8 -left-4 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <span className=\"text-blue-600 font-bold\">{index + 1}</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">{step.title}</h3>\n                <p className=\"text-gray-600 leading-relaxed\">{step.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Doctors Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">\n              Meet Our Featured Doctors\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Consult with top-rated healthcare professionals\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {featuredDoctors.map((doctor) => (\n              <DoctorCard key={doctor.id.toString()} doctor={doctor} />\n            ))}\n          </div>\n          <div className=\"text-center mt-12\">\n            <Link href=\"/doctors\">\n              <button className=\"bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors\">\n                View All Doctors\n              </button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">\n              What Our Patients Say\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Real experiences from people who trust us with their health\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial) => (\n              <div key={testimonial.id} className=\"bg-gray-50 rounded-xl p-6\">\n                <div className=\"flex items-center mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star \n                      key={i} \n                      className={`w-5 h-5 ${i < testimonial.rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} \n                    />\n                  ))}\n                </div>\n                <p className=\"text-gray-700 mb-6 leading-relaxed\">\"{testimonial.feedback}\"</p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mr-4\">\n                    <span className=\"text-gray-500 text-xs\">Avatar</span>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800\">{testimonial.name}</h4>\n                    <p className=\"text-gray-600 text-sm\">{testimonial.location}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Call-to-Action Section */}\n      <section className=\"py-20 bg-gradient-to-r from-green-600 to-blue-600 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n            Start Your Healthcare Journey Today!\n          </h2>\n          <p className=\"text-xl mb-8 text-green-100\">\n            Join thousands of patients who trust Smart Health Care for their medical needs\n          </p>\n          <Link href=\"/login\">\n            <button className=\"bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold hover:bg-gray-100 transition-colors text-lg\">\n              Sign Up Now\n            </button>\n          </Link>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9302}},"version":1}